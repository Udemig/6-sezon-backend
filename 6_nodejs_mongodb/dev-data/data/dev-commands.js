// Geli≈ütirme a≈üamasƒ±nda mongodbdeki veirleirn bozulmasƒ± sƒ±k√ßa kar≈üƒ±la≈ütƒ±ƒüƒ±mƒ±z b√ºr durum ve bu durumda databasdeki veirleri silip json dosyasƒ±ndaki verileri tekrardan aktarmamƒ±z gerekicek bunu aray√ºzden yapmak uƒüra≈ütƒ±cƒ± olucaƒüƒ± i√ßin 2 fonksiyon hazƒ±rlƒ±yƒ±caz.

const fs = require("fs");
const mongoose = require("mongoose");
const Tour = require("../../models/tourModel.js");
// json dosyasƒ±ndan verileri al
const tours = JSON.parse(fs.readFileSync(`${__dirname}/tours.json`));

// dotenv k√ºt√ºphaneisni √ßevre deƒüi≈ükenlere eir≈ümek i√ßin kuruyoruz
require("dotenv").config();

// mongodb veritabanƒ±na baƒülan
mongoose
  .connect(process.env.DATABASE_URL)
  .then(() => console.log("ü•≥ VeriTabanƒ± ile baƒülantƒ± kuruldu ü•≥"))
  .catch((err) =>
    console.log("üò° VeriTabanƒ±na baƒülanƒ±rken hata olu≈ütu üò°", err)
  );

//devdata klas√∂r√ºnde ki json dosyalarƒ±ndan verileri alƒ±p mongodbye aktar
const importData = async () => {
  try {
    await Tour.create(tours, { validateBeforeSave: false });
    console.log("Json verileri kolleksiyona aktarƒ±ldƒ±");
  } catch (error) {
    console.log(error);
  }
  process.exit();
};

//mongodb deki datalarƒ± silecek
const deleteData = async () => {
  try {
    await Tour.deleteMany();

    console.log("B√ºt√ºn veriler temizlendi");
  } catch (error) {
    console.log(error);
  }
  process.exit();
};

console.log(process.argv);

//komutun sonuna eklenen arg√ºmana g√∂re √ßalƒ±≈üacak fonksiyonu belirliyoruz
if (process.argv.includes("--import")) {
  importData();
} else if (process.argv.includes("--delete")) {
  deleteData();
}
